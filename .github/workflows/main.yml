name: CI pipeline
on:
  push:
    branches: 
      - master
      - dev
      - cd-pipeline
  pull_request:
    branches:
      - master
      - dev
  workflow_dispatch:
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout your repository under $GITHUB_WORKSPACE
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install packages with ci, and finally test
        run: npm ci

      - name: run custom work in package.json with run build
        run: npm run build --if-present

      - name: syntax check over all .js files
        run: |
          for i in $(find -name '*.js' -not -path "./node_modules/*")
          do 
            node --check $i
          done

      - name: run tests
        run: npm test

      #- name: upload code as artifact
      #  uses: actions/upload-artifact@v2
      #  with:
      #    name: simple-area-calculator-backend-artifact
      #    path: ./

  dev-deployment:
    needs: build-and-test
    if: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/cd-pipeline' }}
    env:
      ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
    runs-on: ubuntu-latest
    steps:
      #- name: Download artifact
      #  uses: actions/download-artifact@v2
      #  with:
      #    name: simple-area-calculator-backend-artifact
      - name: Checkout your repository under $GITHUB_WORKSPACE
        uses: actions/checkout@v2

      - name: install terraform
        uses: hashicorp/setup-terraform@v1

      - name: deploy resources using terraform
        run: |
          cd IaC/
          terraform init
          terraform apply -var='env=dev' -var='location=South Central US' -var='containerRegistry=${{ secrets.CR_LOGIN_SERVER }}' -var='containerRegistryUser=${{ secrets.CR_USERNAME }}' -var='containerRegistryPassword=${{ secrets.CR_PASSWORD }}' -auto-approve

      - name: login into the azure container registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.CR_LOGIN_SERVER }}
          username: ${{ secrets.CR_USERNAME }}
          password: ${{ secrets.CR_PASSWORD }}
      
      - name: build and push the docker image
        run: |
          docker build . -t simpleareacalculatorbackendcontainerregistry.azurecr.io/simple-area-calculator-backend:latest
          docker push simpleareacalculatorbackendcontainerregistry.azurecr.io/simple-area-calculator-backend:latest

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.0.72
          inlineScript: |
            az role assignment create --assignee $(az webapp identity show -n simple-area-calculator-backend-app-service-dev --resource-group simple-area-calulator-backend-rg | jq -r '.principalId') --scope /subscriptions/70566b9f-5c0d-4753-affe-74e6d67b11f7/resourceGroups/simple-area-calulator-backend-rg/providers/Microsoft.ContainerRegistry/registries/simpleAreaCalculatorBackendContainerRegistry --role "AcrPull"

      - uses: azure/webapps-deploy@v2
        with:
          app-name: 'simple-area-calculator-backend-app-service-dev'
          images: 'simpleareacalculatorbackendcontainerregistry.azurecr.io/simple-area-calculator-backend:latest'